generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filterJson", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =======================
// üë§ USER AUTH & PROFILE
// =======================
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  firstName String
  lastName  String
  gender    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isActive  Boolean   @default(true)
  lastLogin DateTime?

  // Relations
  healthProfile HealthProfile?
  mealLogs      MealLog[]
  healthLogs    HealthLog[]
  preferences   UserPreferences?

  notifications Notification[]

  @@index([email])
  @@map("users")
}

// ========================
// üßç‚Äç‚ôÇÔ∏è HEALTH PROFILE
// ========================
model HealthProfile {
  id                  String        @id @default(uuid())
  userId              String        @unique
  age                 Int
  weight              Float
  height              Float
  bloodPressure       String
  cholesterolLevel    Float
  bmi                 Float
  medicalConditions   String[]
  allergies           String[]
  medications         String[]
  dietaryRestrictions String[]
  targetWeight        Float?
  activityLevel       ActivityLevel @default(MODERATE)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("health_profiles")
}

// ========================
// ü•ó MEAL LOGGING
// ========================
model MealLog {
  id            String     @id @default(uuid())
  userId        String
  mealType      MealType
  foodItems     String[]
  calories      Float
  proteins      Float?
  carbs         Float?
  fats          Float?
  fiber         Float?
  sodium        Float?
  date          DateTime   @default(now())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  rating        Int?       @db.SmallInt
  notes         String?
  isAIGenerated Boolean    @default(false)
  source        MealSource @default(AI)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([mealType])
  @@map("meal_logs")
}

// ========================
// üìâ HEALTH LOGS
// ========================
model HealthLog {
  id            Int      @id @default(autoincrement())
  userId        String
  weight        Float
  bloodPressure String
  cholesterol   Float?
  bmi           Float?
  notes         String?
  date          DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

// =========================
// ‚öôÔ∏è USER PREFERENCES
// =========================
model UserPreferences {
  id                 String            @id @default(uuid())
  userId             String            @unique
  reminderTime       DateTime?
  mealPlanFrequency  MealPlanFrequency @default(DAILY)
  emailNotifications Boolean           @default(true)
  pushNotifications  Boolean           @default(true)
  theme              Theme             @default(LIGHT)
  language           String            @default("en")
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      String
  title       String
  description String
  type        String
  time        DateTime @default(now())
  read        Boolean  @default(false)

  user User @relation(fields: [userId], references: [id])
}

// =====================
// ENUMS
// =====================
enum MealType {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERY_ACTIVE
}

enum StressLevel {
  LOW
  MEDIUM
  HIGH
}

enum Theme {
  LIGHT
  DARK
  SYSTEM
}

enum MealPlanFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum MealSource {
  AI
  USER
  IMPORTED
}
